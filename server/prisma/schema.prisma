generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique
  email    String    @unique
  password String
  Admin    Admin[]
  Banned   Banned?
  Comment  Comment[]
  Like     Like[]
  Review   Review[]
}

model Admin {
  id      Int  @id @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id])
}

model Book {
  id           Int            @id @default(autoincrement())
  title        String
  pages        Int
  author_id    Int
  about        String?
  Author       Author         @relation(fields: [author_id], references: [id])
  BookCategory BookCategory[]
  Review       Review[]
}

model Author {
  id   Int    @id @default(autoincrement())
  name String
  Book Book[]
}

model Review {
  id            Int       @id @default(autoincrement())
  published     Boolean   @default(false)
  title         String
  body          String
  created       DateTime  @default(now())
  book_id       Int
  favoriteQuote String?
  user_id       Int
  thumbnail     String?
  Comment       Comment[]
  Like          Like[]
  Book          Book      @relation(fields: [book_id], references: [id], onDelete: Cascade)
  User          User      @relation(fields: [user_id], references: [id])
}

model Comment {
  post_id Int
  user_id Int
  comment String
  created DateTime @default(now())
  id      Int      @id @default(autoincrement())
  checked Boolean  @default(false)
  post    Review   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [user_id], references: [id])
}

model Like {
  post_id Int
  user_id Int
  created DateTime @default(now())
  post    Review   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [user_id], references: [id])

  @@id([post_id, user_id])
}

model BookCategory {
  book_id     Int
  category_id Int
  book        Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([category_id, book_id])
}

model Category {
  id           Int            @id @default(autoincrement())
  category     String
  BookCategory BookCategory[]
}

model Banned {
  id      Int  @default(autoincrement())
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  @@id([id, user_id])
}
