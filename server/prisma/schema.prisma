// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  email       String        @unique
  password    String
  Author_Post Author_Post[]

  Comment Comment[]
  Like    Like[]
}

model Author_Post {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int
  post    Post @relation(fields: [post_id], references: [id])
  post_id Int

  @@id([user_id, post_id])
}

model Post {
  id          Int           @id @default(autoincrement())
  published   Boolean       @default(false)
  title       String
  body        String
  created     DateTime      @default(now())
  Author_Post Author_Post[]

  Image_Post Image_Post[]
  Comment    Comment[]

  Like Like[]
}

model Image {
  id   Int    @id @default(autoincrement())
  path String

  Image_Post Image_Post[]
}

model Image_Post {
  img    Image @relation(fields: [img_id], references: [id])
  img_id Int

  post    Post @relation(fields: [post_id], references: [id])
  post_id Int

  @@id([img_id, post_id]) // Composite primary key
}

model Comment {
  post Post @relation(fields: [post_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  post_id Int
  user_id Int

  comment String
  created DateTime @default(now())

  @@id([post_id, user_id])
}

model Like {
  post Post @relation(fields: [post_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  post_id Int
  user_id Int

  like Boolean @default(false)

  @@id([post_id, user_id])
}
